<objdefs appVersion="1.0.12">
   <obj.normal id="shimmer_delay" uuid="3dc86ff0-f178-496a-bb6e-eeac2f7921d0">
      <sDescription>modulated delay

modulation depth is recalculated for each buffer size for easy chorusing/phasing effects.

-depth: sets the modulation amount of the internal lfo (controlled by the rate parameter and scaled to small modulation width according to buffer size)
-slope: volume drop-off for each next stage (softening the effect) -&gt; volume at max will let everything through to the next stage at original volume
-rate: speed of modulation
-spread: sets a delay different for each next stage. Set delay-time is maximum time of all stages together, so each stage is a part of the time set by this control, divided by the number of stages
-feed: amount of feedback for each stage
-cutoff: sets the cutoff frequency of a 3dB LP filter in the feedback chain
-panWidth: sets the width of the panning (no panning ... max panning)
-panRate: sets the speed at which the stages are moved between left and right (sine-shaped)
-panSpread: sets the difference is panning-phase between each next phase (do they sit next to each other or does the panning &quot;jump around&quot;)</sDescription>
      <author>robot_mixeur (based on original by Remco van der Most)</author>
      <license>BSD</license>
      <inlets>
         <frac32buffer name="l" description="Left input"/>
         <frac32buffer name="r" description="Right input"/>
         <frac32 name="depth" description="Delay depth"/>
         <frac32 name="slope" description="Delay slope (amount passed to next stage)"/>
         <frac32 name="rate" description="Delay rate"/>
         <frac32 name="spread" description="Delay spread"/>
         <frac32 name="feedback" description="Delay feedback"/>
         <frac32 name="cutoff" description="Delay cutoff"/>
         <frac32 name="panWidth" description="Pan width"/>
         <frac32 name="panRate" description="Pan rate"/>
         <int32 name="panSpread" description="Pan spread"/>
      </inlets>
      <outlets>
         <frac32buffer name="l" description="Left output"/>
         <frac32buffer name="r"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <combo name="length" description="Delay length">
            <MenuEntries>
               <string>256 (5.33ms)</string>
               <string>512 (10.66ms)</string>
               <string>1024 (21.33ms)</string>
               <string>2048 (42.66ms)</string>
               <string>4096 (85.33ms)</string>
               <string>8192 (170ms)</string>
               <string>16384 (341ms)</string>
               <string>32768 (682ms)</string>
               <string>65536 (1.36s)</string>
               <string>131072 (2.73s)</string>
               <string>262144 (5.46s)</string>
               <string>524288 (10.9s)</string>
               <string>1048576 (21.8s)</string>
               <string>2097152 (43.7s)</string>
            </MenuEntries>
            <CEntries>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
            </CEntries>
         </combo>
         <spinner name="stages" description="Number of delay stages" MinValue="1" MaxValue="16" DefaultValue="2"/>
      </attribs>
      <includes>
         <include>./code/rmx_dsp_lib.hpp</include>
      </includes>
      <code.declaration><![CDATA[static const uint32_t LENGTHPOW = attr_length;
static const uint32_t LENGTH = 1 << attr_length;
static const uint32_t LENGTHMASK = LENGTH - 1;

static const uint32_t STAGES = attr_stages;

int16_t* array;
uint32_t writepos = 0;

uint32_t phase = 0;

int32_t damp[STAGES];
int32_t in[STAGES + 1];

int32_t depthSmooth = 0;
int32_t depthPrev = 0;
int32_t depthStep = 0;

int32_t spreadSmooth = 0;
int32_t spreadPrev = 0;
int32_t spreadStep = 0;

uint32_t panPhase = 0;]]></code.declaration>
      <code.init><![CDATA[static int16_t _array[LENGTH * STAGES] __attribute__ ((section (".sdram")));
array = &_array[0];

for (int i = 0; i < LENGTH * STAGES; ++i) array[i] = 0;
for (int i = 0; i < attr_stages; ++i) damp[i] = 0;
for (int i = 0; i < attr_stages + 1; ++i) in[i] = 0;]]></code.init>
      <code.krate><![CDATA[// depth
depthSmooth += ((inlet_depth >> (LENGTHPOW < 11 ? 11 : LENGTHPOW) - 11) - depthSmooth) >> 6;
depthStep = (depthSmooth - depthPrev) >> 4;
int32_t depth = depthPrev;
depthPrev = depthSmooth;

// slope
int32_t slope = inlet_slope;

// rate / frequency
int32_t rate;
if (inlet_rate) {
	MTOFEXTENDED(inlet_rate, rate)
	rate = rate >> 10;
} else {
	rate = 0;
}

// spread
spreadSmooth += (inlet_spread - spreadSmooth) >> 6;
spreadStep = (spreadSmooth - spreadPrev) >> 4;
int32_t spread = spreadPrev;
spreadPrev = spreadSmooth;

// feedback
int32_t feedback = inlet_feedback;

// damp / cutoff
int32_t cutoff;
MTOF(inlet_cutoff, cutoff)

// pan width
int32_t panWidth = inlet_panWidth;

// pan rate
int32_t panRate;
if (inlet_panRate) {
	MTOFEXTENDED(inlet_panRate, panRate)
	panRate = panRate >> 10;
} else {
	panRate = 0;
}

// pan spread
int32_t panSpread = inlet_panSpread;]]></code.krate>
      <code.srate><![CDATA[int32_t inLR = (inlet_l + inlet_r) >> 1;
int32_t outL = 0;
int32_t outR = 0;

// update smooth parameters
writepos = (writepos + 1) & LENGTHMASK;

phase += rate;

depth += depthStep;
spread += spreadStep;

panPhase += panRate;

// initialize first stage
in[0] = __SSAT(((inLR >> 1) + ___SMMUL(-(feedback << 1) * 3, in[1] << 2)) >> 14, 16);

for (int i = 0; i < attr_stages; i++) {
	// update delay line
	array[writepos + (i << LENGTHPOW)] = __SSAT(in[i], 15) + __SSAT(___SMMUL(-(feedback << 1) * 3, in[i + 1] << 2), 15);

	// calculate phase
	uint32_t p = phase + (i * ((1 << 31) / LENGTH) << 1);
	p = p > (1 << 31) ? -p : p;

	// modulate phase with depth & spread
	uint32_t tmp_d =  (___SMMUL(depth << 1, p) + (i * spread / STAGES)) & ((1 << 27) - 1);
	uint32_t tmp_di = writepos - (tmp_d >> (27 - LENGTHPOW)) - 1;
	
	uint32_t tmp_w1 = (tmp_d << (LENGTHPOW + 3)) & 0x3FFFFFFF;
	uint32_t tmp_w2 = (1 << 30) - tmp_w1;
	
	int32_t tmp_a1 = array[(tmp_di & LENGTHMASK) + (i << LENGTHPOW)] << 16;
	int32_t tmp_a2 = array[((tmp_di + 1) & LENGTHMASK) + (i << LENGTHPOW)] << 16;
	
	int32_t tmp_r = ___SMMUL(tmp_a1, tmp_w1) + ___SMMUL(tmp_a2, tmp_w2);

	// filter
	damp[i] = ___SMMLA((tmp_r - damp[i]) << 1, cutoff, damp[i]);

	// update next stage
	in[i + 1] = __SSAT(inLR + (damp[i] + tmp_r >> 1) >> 14, 15);

	// panning
	int32_t sine;
	SINE2TINTERP((i * ((1 << 27) / LENGTHMASK) * panSpread) + panPhase, sine);
	sine = ___SMMUL(sine, panWidth) + (1 << 26);

	// accumulate stage to output
	outL += ___SMMUL(___SMMUL((damp[i] + tmp_r >> 1) << 3, slope << 2) << 3, sine << 2);
	outR += ___SMMUL(___SMMUL((damp[i] + tmp_r >> 1) << 3, slope << 2) << 3, (1 << 27) - sine << 2);
}

// saturate and write to output
outlet_l = __SSAT(outL << 1, 28);
outlet_r = __SSAT(outR << 1, 28);]]></code.srate>
   </obj.normal>
</objdefs>