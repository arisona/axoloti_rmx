<objdefs appVersion="1.0.12">
   <obj.normal id="reverb" uuid="b1ecfd2f-3b0e-4fb2-8375-64770ef075ff">
      <sDescription>Reverb. Adapted from object by Mark Harris, and based on Mutable Instruments code.

http://mutable-instruments.com</sDescription>
      <author>robot_mixeur</author>
      <license>GPL</license>
      <inlets>
         <frac32buffer name="l" description="Left input"/>
         <frac32buffer name="r" description="Right input"/>
         <frac32 name="amount" description="Reverb amount"/>
         <frac32 name="time" description="Time"/>
         <frac32 name="diffusion" description="Diffusion"/>
         <frac32 name="lowpass" description="Low-pass"/>
      </inlets>
      <outlets>
         <frac32buffer name="l"/>
         <frac32buffer name="r"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <includes>
         <include>./code/rmx_dsp_lib.hpp</include>
      </includes>
      <code.declaration><![CDATA[elements::Reverb reverb;]]></code.declaration>
      <code.init><![CDATA[uint16_t* buf = (uint16_t*) sdram_malloc(32768);
if (!buf) return;

reverb.Init(buf);]]></code.init>
      <code.krate><![CDATA[static float left[BUFSIZE];
static float right[BUFSIZE];

reverb.set_amount(rmx::clamp(0.0f, 1.0f, q27_to_float(inlet_amount)) * 0.5f);
reverb.set_input_gain(1.0f);
reverb.set_time(rmx::clamp(0.0f, 1.0f, q27_to_float(inlet_time)) * 0.8f + 0.1f);
reverb.set_diffusion(rmx::clamp(0.0f, 1.0f, q27_to_float(inlet_diffusion)) * 0.5f + 0.5f);
reverb.set_lp(1.0f - rmx::clamp(0.0f, 1.0f, q27_to_float(inlet_lowpass)));

for (int i = 0; i < BUFSIZE; ++i) {
	left[i] = q27_to_float(inlet_l[i]);
	right[i] = q27_to_float(inlet_r[i]);
}

reverb.Process(left, right, BUFSIZE);

for (int i = 0; i < BUFSIZE; ++i){
	outlet_l[i] = float_to_q27(left[i]);
	outlet_r[i] = float_to_q27(right[i]);
}]]></code.krate>
   </obj.normal>
</objdefs>